[{"C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\index.js":"1","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\App.js":"2","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\reportWebVitals.js":"3","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\store.js":"4","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\styles\\globalStyles.js":"5","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\data\\dataActions.js":"6","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\blockchain\\blockchainActions.js":"7","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\blockchain\\blockchainReducer.js":"8","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\data\\dataReducer.js":"9","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\index.js":"10","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\App.js":"11","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\reportWebVitals.js":"12","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\store.js":"13","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\styles\\globalStyles.js":"14","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\data\\dataActions.js":"15","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\blockchain\\blockchainActions.js":"16","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\blockchain\\blockchainReducer.js":"17","C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\data\\dataReducer.js":"18","E:\\boocrewmintercode\\boocrewminter\\src\\index.js":"19","E:\\boocrewmintercode\\boocrewminter\\src\\reportWebVitals.js":"20","E:\\boocrewmintercode\\boocrewminter\\src\\App.js":"21","E:\\boocrewmintercode\\boocrewminter\\src\\redux\\store.js":"22","E:\\boocrewmintercode\\boocrewminter\\src\\styles\\globalStyles.js":"23","E:\\boocrewmintercode\\boocrewminter\\src\\redux\\blockchain\\blockchainActions.js":"24","E:\\boocrewmintercode\\boocrewminter\\src\\redux\\data\\dataActions.js":"25","E:\\boocrewmintercode\\boocrewminter\\src\\redux\\blockchain\\blockchainReducer.js":"26","E:\\boocrewmintercode\\boocrewminter\\src\\redux\\data\\dataReducer.js":"27","E:\\NugBudzMintingPage\\src\\index.js":"28","E:\\NugBudzMintingPage\\src\\reportWebVitals.js":"29","E:\\NugBudzMintingPage\\src\\App.js":"30","E:\\NugBudzMintingPage\\src\\redux\\store.js":"31","E:\\NugBudzMintingPage\\src\\styles\\globalStyles.js":"32","E:\\NugBudzMintingPage\\src\\redux\\data\\dataActions.js":"33","E:\\NugBudzMintingPage\\src\\redux\\blockchain\\blockchainActions.js":"34","E:\\NugBudzMintingPage\\src\\redux\\data\\dataReducer.js":"35","E:\\NugBudzMintingPage\\src\\redux\\blockchain\\blockchainReducer.js":"36"},{"size":629,"mtime":1632079558855,"results":"37","hashOfConfig":"38"},{"size":8537,"mtime":1632080320919,"results":"39","hashOfConfig":"38"},{"size":375,"mtime":1632079558871,"results":"40","hashOfConfig":"38"},{"size":579,"mtime":1632079558871,"results":"41","hashOfConfig":"38"},{"size":1870,"mtime":1631847793324,"results":"42","hashOfConfig":"38"},{"size":1124,"mtime":1632079558871,"results":"43","hashOfConfig":"38"},{"size":2396,"mtime":1632080224560,"results":"44","hashOfConfig":"38"},{"size":893,"mtime":1632079558871,"results":"45","hashOfConfig":"38"},{"size":867,"mtime":1632079558871,"results":"46","hashOfConfig":"38"},{"size":629,"mtime":1632079558855,"results":"47","hashOfConfig":"48"},{"size":10782,"mtime":1633490062872,"results":"49","hashOfConfig":"48"},{"size":375,"mtime":1632079558871,"results":"50","hashOfConfig":"48"},{"size":579,"mtime":1632079558871,"results":"51","hashOfConfig":"48"},{"size":1870,"mtime":1631847793324,"results":"52","hashOfConfig":"48"},{"size":1124,"mtime":1633472606164,"results":"53","hashOfConfig":"48"},{"size":2396,"mtime":1633453754714,"results":"54","hashOfConfig":"48"},{"size":893,"mtime":1632079558871,"results":"55","hashOfConfig":"48"},{"size":867,"mtime":1632079558871,"results":"56","hashOfConfig":"48"},{"size":629,"mtime":1632079558855,"results":"57","hashOfConfig":"58"},{"size":375,"mtime":1632079558871,"results":"59","hashOfConfig":"58"},{"size":11017,"mtime":1633674573271,"results":"60","hashOfConfig":"58"},{"size":579,"mtime":1632079558871,"results":"61","hashOfConfig":"58"},{"size":1870,"mtime":1631847793324,"results":"62","hashOfConfig":"58"},{"size":2519,"mtime":1633674241076,"results":"63","hashOfConfig":"58"},{"size":1124,"mtime":1633472606164,"results":"64","hashOfConfig":"58"},{"size":893,"mtime":1632079558871,"results":"65","hashOfConfig":"58"},{"size":867,"mtime":1632079558871,"results":"66","hashOfConfig":"58"},{"size":629,"mtime":1632079558855,"results":"67","hashOfConfig":"68"},{"size":375,"mtime":1632079558871,"results":"69","hashOfConfig":"68"},{"size":11077,"mtime":1633854945081,"results":"70","hashOfConfig":"68"},{"size":579,"mtime":1632079558871,"results":"71","hashOfConfig":"68"},{"size":1870,"mtime":1631847793324,"results":"72","hashOfConfig":"68"},{"size":1124,"mtime":1633472606164,"results":"73","hashOfConfig":"68"},{"size":2519,"mtime":1633851326430,"results":"74","hashOfConfig":"68"},{"size":867,"mtime":1632079558871,"results":"75","hashOfConfig":"68"},{"size":893,"mtime":1632079558871,"results":"76","hashOfConfig":"68"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j9avcz",{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mzg6ru",{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"txfmwz",{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sx4oun",{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\index.js",[],"C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\App.js",["153","154","155"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"./redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"./redux/data/dataActions\";\r\nimport * as s from \"./styles/globalStyles\";\r\nimport styled from \"styled-components\";\r\nimport i1 from \"./assets/images/1.gif\";\r\nimport newbanner from \"./assets/images/newbanner.png\"\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 10px;\r\n  border-radius: 50px;\r\n  border: none;\r\n  background-color: #ffffff;\r\n  padding: 10px;\r\n  font-weight: bold;\r\n  color: #000000;\r\n  width: 100px;\r\n  cursor: pointer;\r\n  box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  -webkit-box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  -moz-box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  :active {\r\n    box-shadow: none;\r\n    -webkit-box-shadow: none;\r\n    -moz-box-shadow: none;\r\n  }\r\n`;\r\n\r\nexport const ResponsiveWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: stretched;\r\n  align-items: stretched;\r\n  width: 100%;\r\n  @media (min-width: 767px) {\r\n    flex-direction: row;\r\n  }\r\n`;\r\n\r\nexport const StyledImg = styled.img`\r\n  width: 200px;\r\n  height: 200px;\r\n  @media (min-width: 767px) {\r\n    width: 350px;\r\n    height: 350px;\r\n  }\r\n  transition: width 0.5s;\r\n  transition: height 0.5s;\r\n`;\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [feedback, setFeedback] = useState(\"Maybe it's your lucky day.\");\r\n  const [claimingNft, setClaimingNft] = useState(false);\r\n\r\n  const claimNFTs = (_amount) => {\r\n    if (_amount <= 0) {\r\n      return;\r\n    }\r\n    setFeedback(\"Launching your Doodlenaut into the Ether (minting Doodlenaut)...\");\r\n    setClaimingNft(true);\r\n    blockchain.smartContract.methods\r\n      .mint(blockchain.account, _amount)\r\n      .send({\r\n        gasLimit: \"285000\",\r\n        to: \"0xAC065b23521297a6C94B482db6f574Ac7e8E4E31\",\r\n        from: blockchain.account,\r\n        value: blockchain.web3.utils.toWei((.01 * _amount).toString(), \"ether\"),\r\n      })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setFeedback(\"Sorry, something went wrong please try again later.\");\r\n        setClaimingNft(false);\r\n      })\r\n      .then((receipt) => {\r\n        setFeedback(\r\n          \"CONGRATS! Your Doodlenaut is officially in the Ether! go visit opensea.io to view it.\"\r\n        );\r\n        setClaimingNft(false);\r\n        dispatch(fetchData(blockchain.account));\r\n      });\r\n  };\r\n\r\n  const getData = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [blockchain.account]);\r\n\r\n  return (\r\n    <s.Screen style={{ backgroundColor: \"var(--black)\" }}>\r\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\r\n        <s.TextTitle\r\n          style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\", padding: 0, margin: 0, \r\n          borderStyle: \"solid\", borderColor: \"black\", borderWidth: 0,\r\n          borderRadius: 50  }}\r\n        >\r\n          {/* Doodlenaut Minter! */}\r\n          <StyledImg alt={\"example\"} \r\n          src={newbanner} \r\n          style={{width: 486/2, height: 207/2}}/>\r\n        </s.TextTitle>\r\n        <s.SpacerMedium />\r\n        <ResponsiveWrapper flex={1} style={{ padding: 24, paddingTop: 0 }}>\r\n          <s.Container flex={1} jc={\"center\"} ai={\"center\"} style={{paddingTop: 0}}>\r\n            <StyledImg alt={\"example\"} src={i1} style={{paddingTop: 0, borderStyle: \"solid\", borderColor: \"black\", borderWidth: 5,\r\n                    borderRadius: 20 }}/>\r\n            <s.SpacerMedium />\r\n            <s.TextTitle\r\n              style={{ textAlign: \"center\", fontSize: 35, fontWeight: \"bold\", borderStyle: \"solid\", borderColor: \"black\", \r\n              borderWidth: 5,\r\n              paddingLeft: 100,\r\n              paddingRight: 100,\r\n              borderRadius: 50  }}\r\n            >\r\n              {data.totalSupply}/1000\r\n            </s.TextTitle>\r\n          </s.Container>\r\n          <s.SpacerMedium />\r\n          <s.Container\r\n            flex={1}\r\n            jc={\"center\"}\r\n            ai={\"center\"}\r\n            style={{ backgroundColor: \"#c2c2c2\", padding: 24, borderStyle: \"solid\", borderColor: \"black\", borderWidth: 5,\r\n                    borderRadius: 30 }}\r\n          >\r\n            {Number(data.totalSupply) == 1000 ? (\r\n              <>\r\n                <s.TextTitle style={{ textAlign: \"center\" }}>\r\n                  The sale has ended.\r\n                </s.TextTitle>\r\n                <s.SpacerSmall />\r\n                <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                  Dont worry, you're not missing out! You can still Doodlenauts on{\" \"}\r\n                  <a\r\n                    // target={\"_blank\"}\r\n                    href={\"https://testnets.opensea.io/collection/rinkeby-doodlenauts\"}\r\n                  >\r\n                    Opensea.io\r\n                  </a>\r\n                </s.TextDescription>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <s.TextTitle style={{ textAlign: \"center\" }}>\r\n                  1 DOODL costs .01 ETH.\r\n                </s.TextTitle>\r\n                <s.SpacerXSmall />\r\n                <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                  Excluding gas fees.\r\n                </s.TextDescription>\r\n                <s.SpacerSmall />\r\n                <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                  {feedback}\r\n                </s.TextDescription>\r\n                <s.SpacerMedium />\r\n                {blockchain.account === \"\" ||\r\n                blockchain.smartContract === null ? (\r\n                  <s.Container ai={\"center\"} jc={\"center\"}>\r\n                    <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                      Connect to the Ethereum network\r\n                    </s.TextDescription>\r\n                    <s.SpacerSmall />\r\n                    <StyledButton\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        dispatch(connect());\r\n                        getData();\r\n                      }}\r\n                    >\r\n                      CONNECT\r\n                    </StyledButton>\r\n                    <s.SpacerLarge />\r\n                    <s.TextDescription style={{textAlign: \"center\"}}>\r\n                      <a href=\"https://doodlenauts.io\">Doodlenauts Main Page</a>\r\n                    </s.TextDescription>\r\n                    {blockchain.errorMsg !== \"\" ? (\r\n                      <>\r\n                        <s.SpacerSmall />\r\n                        <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                          {blockchain.errorMsg}\r\n                        </s.TextDescription>\r\n                      </>\r\n                    ) : null}\r\n                  </s.Container>\r\n                ) : (\r\n                  <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\r\n                    <StyledButton\r\n                      disabled={claimingNft ? 1 : 0}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        claimNFTs(1);\r\n                        getData();\r\n                      }}\r\n                    >\r\n                      {claimingNft ? \"BUSY\" : \"BUY 1\"}\r\n                    </StyledButton>\r\n                  </s.Container>\r\n                )}\r\n              </>\r\n            )}\r\n          </s.Container>\r\n        </ResponsiveWrapper>\r\n        <s.SpacerSmall />\r\n        <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }}>\r\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 9 }}>\r\n            Please make sure you are connected to the right network (Ethereum\r\n            Mainnet) and the correct address. Please note: Once you make the\r\n            purchase, you cannot undo this action.\r\n          </s.TextDescription>\r\n          <s.SpacerSmall />\r\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 9 }}>\r\n            We have set the gas limit to 285000 for the contract to successfully\r\n            mint your NFT. We recommend that you don't change the gas limit.\r\n          </s.TextDescription>\r\n        </s.Container>\r\n      </s.Container>\r\n    </s.Screen>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\reportWebVitals.js",[],"C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\store.js",[],"C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\styles\\globalStyles.js",[],"C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\data\\dataActions.js",[],"C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\blockchain\\blockchainActions.js",["156"],"// constants\r\nimport Web3EthContract from \"web3-eth-contract\";\r\nimport Web3 from \"web3\";\r\nimport SmartContract from \"../../contracts/Doodlenauts.json\";\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    const { ethereum } = window;\r\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\r\n    if (metamaskIsInstalled) {\r\n      Web3EthContract.setProvider(ethereum);\r\n      let web3 = new Web3(ethereum);\r\n      try {\r\n        const accounts = await ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const networkId = await ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        // const NetworkData = await SmartContract.networks[networkId];\r\n        if (networkId == 4) {\r\n          const SmartContractObj = new Web3EthContract(\r\n            SmartContract,\r\n            \"0xAC065b23521297a6C94B482db6f574Ac7e8E4E31\"\r\n          );\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              smartContract: SmartContractObj,\r\n              web3: web3,\r\n            })\r\n          );\r\n          // Add listeners start\r\n          ethereum.on(\"accountsChanged\", (accounts) => {\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(connectFailed(\"Change network to Ethereum.\"));\r\n        }\r\n      } catch (err) {\r\n        dispatch(connectFailed(\"Something went wrong.\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Please install Metamask.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};\r\n","C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\blockchain\\blockchainReducer.js",[],"C:\\Users\\Sean.000\\_2doodleminter\\example_nft_minter\\src\\redux\\data\\dataReducer.js",[],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\index.js",[],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\App.js",["157","158","159","160"],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\reportWebVitals.js",[],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\store.js",[],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\styles\\globalStyles.js",[],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\data\\dataActions.js",[],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\blockchain\\blockchainActions.js",["161"],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\blockchain\\blockchainReducer.js",[],"C:\\Users\\Sean.000\\Desktop\\_NFT_Storage\\example_nft_minter\\src\\redux\\data\\dataReducer.js",[],"E:\\boocrewmintercode\\boocrewminter\\src\\index.js",[],"E:\\boocrewmintercode\\boocrewminter\\src\\reportWebVitals.js",[],"E:\\boocrewmintercode\\boocrewminter\\src\\App.js",["162","163","164","165"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { connect } from \"./redux/blockchain/blockchainActions\";\r\nimport { fetchData } from \"./redux/data/dataActions\";\r\nimport * as s from \"./styles/globalStyles\";\r\nimport styled from \"styled-components\";\r\nimport i1 from \"./assets/images/hidden.gif\";\r\nimport newbanner from \"./assets/images/logo.png\"\r\n\r\nexport const StyledButton = styled.button`\r\n  padding: 10px;\r\n  border-radius: 50px;\r\n  border: none;\r\n  background-color: #ffffff;\r\n  padding: 10px;\r\n  padding-left: 15px;\r\n  padding-right: 15px;\r\n  font-weight: bold;\r\n  font-size: 40px;\r\n  color: #000000;\r\n  cursor: pointer;\r\n  box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  -webkit-box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  -moz-box-shadow: 0px 6px 0px -2px rgba(250, 250, 250, 0.3);\r\n  :active {\r\n    box-shadow: none;\r\n    -webkit-box-shadow: none;\r\n    -moz-box-shadow: none;\r\n  }\r\n`;\r\n\r\nexport const ResponsiveWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: column;\r\n  justify-content: stretched;\r\n  align-items: stretched;\r\n  width: 100%;\r\n  @media (min-width: 767px) {\r\n    flex-direction: row;\r\n  }\r\n`;\r\n\r\nexport const StyledImg = styled.img`\r\n  width: 200px;\r\n  height: 200px;\r\n  @media (min-width: 767px) {\r\n    width: 350px;\r\n    height: 350px;\r\n  }\r\n  transition: width 0.5s;\r\n  transition: height 0.5s;\r\n`;\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const blockchain = useSelector((state) => state.blockchain);\r\n  const data = useSelector((state) => state.data);\r\n  const [feedback, setFeedback] = useState(\"\");\r\n  const [claimingNft, setClaimingNft] = useState(false);\r\n  const claimNFTs = (_amount) => {\r\n    _amount = document.getElementById(\"inputBox\").value;\r\n    if (_amount <= 0) {\r\n      return;\r\n    }\r\n    setFeedback(\"Minting your Official BooCrew NFT...\");\r\n    setClaimingNft(true);\r\n    blockchain.smartContract.methods\r\n      .mint(blockchain.account, _amount)\r\n      // ********\r\n      // You can change the line above to\r\n      // .whiteListMint(blockchain.account, _amount) if you want only whitelisted\r\n      // users to be able to mint through your website!\r\n      // And after you're done with whitelisted users buying from your website,\r\n      // You can switch it back to .mint(blockchain.account, _amount).\r\n      // ********\r\n      .send({\r\n        gasLimit: 285000 * _amount,\r\n        to: \"0x8815e06FC5b57Bd4d5590977a697582f19d2330e\", // the address of your contract\r\n        from: blockchain.account,\r\n        value: blockchain.web3.utils.toWei((0.035 * _amount).toString(), \"ether\"),\r\n      })\r\n      .once(\"error\", (err) => {\r\n        console.log(err);\r\n        setFeedback(\"Sorry, something went wrong. Check your transaction on Etherscan to find out what happened!\");\r\n        setClaimingNft(false);\r\n      })\r\n      .then((receipt) => {\r\n        setFeedback(\r\n          \"Your BooCrew NFT has been successfully minted!\"\r\n        );\r\n        setClaimingNft(false);\r\n        dispatch(fetchData(blockchain.account));\r\n      });\r\n  };\r\n\r\n  const getData = () => {\r\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\r\n      dispatch(fetchData(blockchain.account));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [blockchain.account]);\r\n\r\n  return (\r\n    <s.Screen style={{ backgroundColor: \"var(--black)\", fontSize: 40 }}>\r\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24, backgroundColor: \"#FFA537\"}}>\r\n        <s.TextTitle\r\n          style={{ display: \"flex\", flexDirection: \"row\", textAlign: \"left\", fontSize: 12, fontWeight: \"bold\", paddingRight: 10, margin: 0, \r\n          borderStyle: \"solid\", borderColor: \"black\", borderWidth: 0,\r\n          borderRadius: 50, textAlign: \"center\", justifySelf: \"center\", justifyContent: \"center\"  }}\r\n        >\r\n          <a href=\"https://boocrew.io\"><StyledImg alt={\"BooCrew Logo\"} \r\n          src={newbanner} \r\n          style={{width: 70, height: 70, textAlign: \"center\"}}></StyledImg></a>\r\n        </s.TextTitle>\r\n        <s.SpacerMedium />\r\n        <ResponsiveWrapper flex={1} style={{ padding: 24, paddingTop: 0 }}>\r\n          <s.Container flex={1} jc={\"center\"} ai={\"center\"} style={{paddingTop: 0, flexDirection: \"column\"}}>\r\n          <s.TextTitle\r\n              style={{ \r\n              textAlign: \"center\", \r\n              fontSize: 40, \r\n              fontWeight: \"bold\", \r\n              borderStyle: \"solid\", \r\n              borderColor: \"black\",}}>\r\n                0.035 ETH + Gas\r\n              </s.TextTitle>\r\n            <StyledImg alt={\"BooCrew Hidden\"} src={i1} style={{paddingTop: 0, borderStyle: \"solid\", borderColor: \"black\", borderWidth: 5,\r\n                    borderRadius: 0 }}/>\r\n            <s.TextTitle\r\n              style={{ textAlign: \"center\", fontSize: 80, fontWeight: \"bold\", borderStyle: \"solid\", borderColor: \"black\", \r\n              borderWidth: 0,\r\n              paddingLeft: 100,\r\n              paddingRight: 100,\r\n              borderRadius: 0,\r\n              marginTop: 0,\r\n              marginBottom: 0\r\n              }}\r\n            >\r\n              {blockchain.account == null ? \"????\" : (data.totalSupply)}/5555\r\n            </s.TextTitle>\r\n            {/* <s.SpacerMedium/> */}\r\n            <s.Container\r\n            flex={1}\r\n            jc={\"center\"}\r\n            ai={\"center\"}\r\n            style={{ \r\n              backgroundColor: \"#FFA537\", \r\n              padding: 24,\r\n              paddingTop: 0,\r\n              borderStyle: \"solid\", \r\n              borderColor: \"black\", \r\n              borderWidth: 0,\r\n              borderRadius: 30,\r\n              fontSize: 40 }}\r\n          >\r\n            {Number(data.totalSupply) == 5555 ? (\r\n              <>\r\n                <s.TextTitle style={{ textAlign: \"center\" }}>\r\n                  The sale has ended.\r\n                </s.TextTitle>\r\n                <s.SpacerSmall />\r\n                <s.TextDescription style={{ textAlign: \"center\" }}>\r\n                  Dont worry, you're not missing out! You can still get Boo Crew NFTs on{\" \"}\r\n                  <a\r\n                    // target={\"_blank\"}\r\n                    href={\"https://testnets.opensea.io/collection/rinkeby-doodlenauts\"}\r\n                  >\r\n                    Opensea.io\r\n                  </a>\r\n                </s.TextDescription>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {/* <s.TextTitle style={{ textAlign: \"center\", fontSize: 30 }}>\r\n                  1 DOODL costs .01 ETH.\r\n                </s.TextTitle>\r\n                <s.SpacerXSmall />\r\n                <s.TextDescription style={{ textAlign: \"center\", fontSize: 30 }}>\r\n                  Excluding gas fees.\r\n                </s.TextDescription>\r\n                <s.SpacerSmall /> */}\r\n                <s.TextDescription style={{ textAlign: \"center\", fontSize: 40 }}>\r\n                  {feedback}\r\n                </s.TextDescription>\r\n                {/* <s.SpacerMedium /> */}\r\n                {blockchain.account === \"\" ||\r\n                blockchain.smartContract === null ? (\r\n                  <s.Container ai={\"center\"} jc={\"center\"}>\r\n                    <s.TextDescription style={{ textAlign: \"center\", fontSize: 80, marginBottom: 0 }}>\r\n                      Connect to the Boo Crew NFT Minter!\r\n                    </s.TextDescription>\r\n                    <s.SpacerSmall />\r\n                    <StyledButton\r\n                      style={{fontFamily: \"coder\"}}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        dispatch(connect());\r\n                        getData();\r\n                      }}\r\n                    >\r\n                      CONNECT\r\n                    </StyledButton>\r\n                    <s.SpacerLarge />\r\n                    {/* <s.TextDescription style={{textAlign: \"center\", fontSize: 30, marginBottom: 0, paddingBottom: 0}}>\r\n                      <a href=\"https://google.com\">Boo Crew NFT Smart Contract</a>\r\n                    </s.TextDescription> */}\r\n                    {blockchain.errorMsg !== \"\" ? (\r\n                      <>\r\n                        <s.SpacerSmall />\r\n                        <s.TextDescription style={{ textAlign: \"center\", fontSize: 50}}>\r\n                          {blockchain.errorMsg}\r\n                        </s.TextDescription>\r\n                      </>\r\n                    ) : null}\r\n                  </s.Container>\r\n                ) : (\r\n                  <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"} style={{marginTop: 0, paddingTop: 0}}>\r\n                    <form>\r\n                    I want <input \r\n                    id=\"inputBox\"\r\n                    placeholder=\"#\" \r\n                    type=\"number\" \r\n                    min=\"1\" \r\n                    max=\"100\"\r\n                    style={{\r\n                      fontSize: 60,\r\n                      textAlign: \"center\",\r\n                      backgroundColor: \"#FFA537\",\r\n                      borderWidth: 4,\r\n                      borderColor: \"black\",\r\n                      borderStyle: \"solid\",\r\n                      borderRadius: 40,\r\n                      paddingRight: 10,\r\n                      // marginBottom: 20,\r\n                      // paddingLeft: 0,\r\n                      // marginLeft: 0,\r\n                      width: 80,\r\n                      fontFamily: \"coder\",}}\r\n                    /> Ghosts\r\n                    </form>\r\n                    <s.SpacerSmall/>\r\n                    <StyledButton\r\n                     style={{fontFamily: \"coder\"}}\r\n                      disabled={claimingNft ? 1 : 0}\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        claimNFTs(1);\r\n                        getData();\r\n                      }}\r\n                    >\r\n                      {claimingNft ? \"BUSY\" : \"MINT\"}\r\n                    </StyledButton>\r\n                  </s.Container>\r\n                )}\r\n              </>\r\n            )}\r\n          </s.Container>\r\n          </s.Container>\r\n          {/* <s.SpacerMedium /> */}\r\n        </ResponsiveWrapper>\r\n        <s.SpacerSmall />\r\n        <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }}>\r\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 40}}>\r\n                      <a \r\n                      href=\"https://rinkeby.etherscan.io/address/0x8815e06FC5b57Bd4d5590977a697582f19d2330e\"\r\n                      style={{\r\n                        textDecoration: \"none\",\r\n                        color: \"black\",\r\n                        fontSize: 20,\r\n                      }}\r\n                      >Boo Crew NFT Smart Contract</a>\r\n          </s.TextDescription>\r\n          <s.SpacerSmall />\r\n          {/* <s.TextDescription style={{ textAlign: \"center\", fontSize: 9 }}>\r\n          </s.TextDescription> */}\r\n        </s.Container>\r\n      </s.Container>\r\n    </s.Screen>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\boocrewmintercode\\boocrewminter\\src\\redux\\store.js",[],"E:\\boocrewmintercode\\boocrewminter\\src\\styles\\globalStyles.js",[],"E:\\boocrewmintercode\\boocrewminter\\src\\redux\\blockchain\\blockchainActions.js",["166"],"// constants\r\nimport Web3EthContract from \"web3-eth-contract\";\r\nimport Web3 from \"web3\";\r\nimport SmartContract from \"../../contracts/Doodlenauts.json\";\r\n// log\r\nimport { fetchData } from \"../data/dataActions\";\r\n\r\nconst connectRequest = () => {\r\n  return {\r\n    type: \"CONNECTION_REQUEST\",\r\n  };\r\n};\r\n\r\nconst connectSuccess = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst connectFailed = (payload) => {\r\n  return {\r\n    type: \"CONNECTION_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst updateAccountRequest = (payload) => {\r\n  return {\r\n    type: \"UPDATE_ACCOUNT\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const connect = () => {\r\n  return async (dispatch) => {\r\n    dispatch(connectRequest());\r\n    const { ethereum } = window;\r\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\r\n    if (metamaskIsInstalled) {\r\n      Web3EthContract.setProvider(ethereum);\r\n      let web3 = new Web3(ethereum);\r\n      try {\r\n        const accounts = await ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const networkId = await ethereum.request({\r\n          method: \"net_version\",\r\n        });\r\n        // const NetworkData = await SmartContract.networks[networkId];\r\n        if (networkId == 4) { // IMPORTANT. ONCE YOUR CONTRACT IS ON THE MAIN NET, SWITCH THIS NUMBER TO 1.\r\n          const SmartContractObj = new Web3EthContract(\r\n            SmartContract,\r\n            \"0x8815e06FC5b57Bd4d5590977a697582f19d2330e\" // **IMPORTANT** PASTE CONTRACT ADDRESS HERE\r\n          );\r\n          dispatch(\r\n            connectSuccess({\r\n              account: accounts[0],\r\n              smartContract: SmartContractObj,\r\n              web3: web3,\r\n            })\r\n          );\r\n          // Add listeners start\r\n          ethereum.on(\"accountsChanged\", (accounts) => {\r\n            dispatch(updateAccount(accounts[0]));\r\n          });\r\n          ethereum.on(\"chainChanged\", () => {\r\n            window.location.reload();\r\n          });\r\n          // Add listeners end\r\n        } else {\r\n          dispatch(connectFailed(\"Change network to Ethereum.\"));\r\n        }\r\n      } catch (err) {\r\n        dispatch(connectFailed(\"Something went wrong.\"));\r\n      }\r\n    } else {\r\n      dispatch(connectFailed(\"Please install Metamask.\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateAccount = (account) => {\r\n  return async (dispatch) => {\r\n    dispatch(updateAccountRequest({ account: account }));\r\n    dispatch(fetchData(account));\r\n  };\r\n};\r\n","E:\\boocrewmintercode\\boocrewminter\\src\\redux\\data\\dataActions.js",[],"E:\\boocrewmintercode\\boocrewminter\\src\\redux\\blockchain\\blockchainReducer.js",[],"E:\\boocrewmintercode\\boocrewminter\\src\\redux\\data\\dataReducer.js",[],"E:\\NugBudzMintingPage\\src\\index.js",[],"E:\\NugBudzMintingPage\\src\\reportWebVitals.js",[],"E:\\NugBudzMintingPage\\src\\App.js",["167","168","169","170","171"],"E:\\NugBudzMintingPage\\src\\redux\\store.js",[],"E:\\NugBudzMintingPage\\src\\styles\\globalStyles.js",[],"E:\\NugBudzMintingPage\\src\\redux\\data\\dataActions.js",[],"E:\\NugBudzMintingPage\\src\\redux\\blockchain\\blockchainActions.js",["172"],"E:\\NugBudzMintingPage\\src\\redux\\data\\dataReducer.js",[],"E:\\NugBudzMintingPage\\src\\redux\\blockchain\\blockchainReducer.js",[],{"ruleId":"173","severity":1,"message":"174","line":1,"column":38,"nodeType":"175","messageId":"176","endLine":1,"endColumn":44},{"ruleId":"177","severity":1,"message":"178","line":96,"column":6,"nodeType":"179","endLine":96,"endColumn":26,"suggestions":"180"},{"ruleId":"181","severity":1,"message":"182","line":135,"column":39,"nodeType":"183","messageId":"184","endLine":135,"endColumn":41},{"ruleId":"181","severity":1,"message":"182","line":51,"column":23,"nodeType":"183","messageId":"184","endLine":51,"endColumn":25},{"ruleId":"173","severity":1,"message":"174","line":1,"column":38,"nodeType":"175","messageId":"176","endLine":1,"endColumn":44},{"ruleId":"177","severity":1,"message":"178","line":101,"column":6,"nodeType":"179","endLine":101,"endColumn":26,"suggestions":"185"},{"ruleId":"186","severity":1,"message":"187","line":109,"column":29,"nodeType":"188","messageId":"184","endLine":109,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":157,"column":39,"nodeType":"183","messageId":"184","endLine":157,"endColumn":41},{"ruleId":"181","severity":1,"message":"182","line":51,"column":23,"nodeType":"183","messageId":"184","endLine":51,"endColumn":25},{"ruleId":"173","severity":1,"message":"174","line":1,"column":38,"nodeType":"175","messageId":"176","endLine":1,"endColumn":44},{"ruleId":"177","severity":1,"message":"178","line":105,"column":6,"nodeType":"179","endLine":105,"endColumn":26,"suggestions":"189"},{"ruleId":"186","severity":1,"message":"187","line":113,"column":29,"nodeType":"188","messageId":"184","endLine":113,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":160,"column":39,"nodeType":"183","messageId":"184","endLine":160,"endColumn":41},{"ruleId":"181","severity":1,"message":"182","line":51,"column":23,"nodeType":"183","messageId":"184","endLine":51,"endColumn":25},{"ruleId":"173","severity":1,"message":"174","line":1,"column":38,"nodeType":"175","messageId":"176","endLine":1,"endColumn":44},{"ruleId":"173","severity":1,"message":"190","line":8,"column":8,"nodeType":"175","messageId":"176","endLine":8,"endColumn":17},{"ruleId":"177","severity":1,"message":"178","line":105,"column":6,"nodeType":"179","endLine":105,"endColumn":26,"suggestions":"191"},{"ruleId":"186","severity":1,"message":"187","line":113,"column":29,"nodeType":"188","messageId":"184","endLine":113,"endColumn":38},{"ruleId":"181","severity":1,"message":"182","line":160,"column":39,"nodeType":"183","messageId":"184","endLine":160,"endColumn":41},{"ruleId":"181","severity":1,"message":"182","line":51,"column":23,"nodeType":"183","messageId":"184","endLine":51,"endColumn":25},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["192"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["193"],"no-dupe-keys","Duplicate key 'textAlign'.","ObjectExpression",["194"],"'newbanner' is defined but never used.",["195"],{"desc":"196","fix":"197"},{"desc":"196","fix":"198"},{"desc":"196","fix":"199"},{"desc":"196","fix":"200"},"Update the dependencies array to be: [blockchain.account, getData]",{"range":"201","text":"202"},{"range":"203","text":"202"},{"range":"204","text":"202"},{"range":"205","text":"202"},[2856,2876],"[blockchain.account, getData]",[3051,3071],[3325,3345],[3324,3344]]